<?xml version="1.0" encoding="UTF-8"?>
<module name="tapi-common"
        xmlns="urn:ietf:params:xml:ns:yang:yin:1"
        xmlns:tapi-common="urn:onf:otcc:yang:tapi-common">
  <namespace uri="urn:onf:otcc:yang:tapi-common"/>
  <prefix value="tapi-common"/>
  <organization>
    <text>ONF OTCC (Open Transport Configuration &amp; Control) Project</text>
  </organization>
  <contact>
    <text>
Project Web: &lt;https://wiki.opennetworking.org/display/OTCC/TAPI&gt;
Project List: &lt;mailto:transport-api@opennetworking.org&gt;
Editor: Karthik Sethuraman
   &lt;mailto:karthik.sethuraman@necam.com&gt;</text>
  </contact>
  <description>
    <text>
This module contains TAPI Common Model definitions.
Source: TapiCommon.uml
Copyright (c) 2018 Open Networking Foundation (ONF). All rights reserved.
License: This module is distributed under the Apache License 2.0
</text>
  </description>
  <revision date="2018-08-31">
    <description>
      <text>ONF Transport API version 2.1.0
This YANG module has been generated from the TAPI UML Model using the IISOMI-Eagle xmi2yang mapping tool.
Changes in this revision: &lt;https://github.com/OpenNetworkingFoundation/TAPI/blob/develop/CHANGE_LOG/change-log.2.1.0.md&gt;</text>
    </description>
    <reference>
      <text>ONF-TR-527, ONF-TR-512, ONF-TR-531, RFC 6020, RFC 6087 and ONF TAPI UML model
&lt;https://github.com/OpenNetworkingFoundation/TAPI/tree/v2.1.0/UML&gt;</text>
    </reference>
  </revision>
  <revision date="2018-03-07">
    <description>
      <text>ONF Transport API version 2.0.2
This YANG module has been generated from the TAPI UML Model using the IISOMI-Eagle xmi2yang mapping tool.
Changes in this revision: &lt;https://github.com/OpenNetworkingFoundation/TAPI/blob/develop/CHANGE_LOG/change-log.2.0.2.md&gt;</text>
    </description>
    <reference>
      <text>ONF-TR-527, ONF-TR-512, ONF-TR-531, RFC 6020, RFC 6087 and ONF TAPI UML model
&lt;https://github.com/OpenNetworkingFoundation/TAPI/tree/v2.0.2/UML&gt;</text>
    </reference>
  </revision>
  <revision date="2018-02-16">
    <description>
      <text>ONF Transport API version 2.0.1
This YANG module has been generated from the TAPI UML Model using the IISOMI-Eagle xmi2yang mapping tool.
Changes in this revision: &lt;https://github.com/OpenNetworkingFoundation/TAPI/blob/develop/CHANGE_LOG/change-log.2.0.1.md&gt;</text>
    </description>
    <reference>
      <text>ONF-TR-527, ONF-TR-512, ONF-TR-531, RFC 6020, RFC 6087 and ONF TAPI UML model
&lt;https://github.com/OpenNetworkingFoundation/TAPI/tree/v2.0.1/UML&gt;</text>
    </reference>
  </revision>
  <revision date="2018-01-02">
    <description>
      <text>ONF Transport API version 2.0.0
This YANG module has been generated from the TAPI UML Model using the IISOMI-Eagle xmi2yang mapping tool.
Changes in this revision: &lt;https://github.com/OpenNetworkingFoundation/TAPI/blob/develop/CHANGE_LOG/change-log.2.0.0.md&gt;</text>
    </description>
    <reference>
      <text>ONF-TR-527, ONF-TR-512, ONF-TR-531, RFC 6020, RFC 6087 and ONF TAPI UML model
&lt;https://github.com/OpenNetworkingFoundation/TAPI/tree/v2.0.0/UML&gt;</text>
    </reference>
  </revision>
  <grouping name="service-interface-point-ref-g">
    <leaf name="service-interface-point-uuid">
      <type name="leafref">
        <path value="/tapi-common:context/tapi-common:service-interface-point/tapi-common:uuid"/>
      </type>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <description>
      <text>none</text>
    </description>
  </grouping>
  <grouping name="admin-state-pac-g">
    <leaf name="administrative-state">
      <type name="administrative-state"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <leaf name="operational-state">
      <type name="operational-state"/>
      <config value="false"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <leaf name="lifecycle-state">
      <type name="lifecycle-state"/>
      <config value="false"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <description>
      <text>Provides state attributes that are applicable to an entity that can be administered. Such an entity also has operational and lifecycle aspects.</text>
    </description>
  </grouping>
  <grouping name="global-class-g">
    <leaf name="uuid">
      <type name="uuid"/>
      <description>
        <text>UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity.
UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters.
Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6</text>
      </description>
    </leaf>
    <list name="name">
      <key value="value-name"/>
      <uses name="name-and-value-g"/>
      <description>
        <text>List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.</text>
      </description>
    </list>
    <description>
      <text>The TAPI GlobalComponent serves as the super class for all TAPI entities that can be directly retrieved by their ID. As such, these are first class entities and their ID is expected to be globally unique. </text>
    </description>
  </grouping>
  <grouping name="lifecycle-state-pac-g">
    <leaf name="lifecycle-state">
      <type name="lifecycle-state"/>
      <config value="false"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <description>
      <text>Provides state attributes for an entity that has lifeccycle aspects only.</text>
    </description>
  </grouping>
  <grouping name="local-class-g">
    <leaf name="local-id">
      <type name="string"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <list name="name">
      <key value="value-name"/>
      <uses name="name-and-value-g"/>
      <description>
        <text>List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.</text>
      </description>
    </list>
    <description>
      <text>The TAPI GlobalComponent serves as the super class for all TAPI entities that can be directly retrieved by their ID. As such, these are first class entities and their ID is expected to be globally unique. </text>
    </description>
  </grouping>
  <grouping name="operational-state-pac-g">
    <leaf name="operational-state">
      <type name="operational-state"/>
      <config value="false"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <leaf name="lifecycle-state">
      <type name="lifecycle-state"/>
      <config value="false"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <description>
      <text>Provides state attributes that are applicable to an entity that reflects operational aspects. Such an entity is expected to also have lifecycle aspects.</text>
    </description>
  </grouping>
  <container name="context">
    <uses name="tapi-context-g"/>
    <presence value="Root container for all TAPI interaction"/>
    <description>
      <text>none</text>
    </description>
  </container>
  <grouping name="tapi-context-g">
    <list name="service-interface-point">
      <key value="uuid"/>
      <uses name="service-interface-point-g"/>
      <description>
        <text>none</text>
      </description>
    </list>
    <uses name="global-class-g"/>
    <description>
      <text>The Network Control Domain (NCD) object class represents the scope of control that a particular SDN controller has with respect to a particular network, (i.e., encompassing a designated set of interconnected (virtual) network elements).</text>
    </description>
  </grouping>
  <grouping name="resource-spec-g">
    <uses name="global-class-g"/>
    <description>
      <text>none</text>
    </description>
  </grouping>
  <grouping name="service-spec-g">
    <uses name="global-class-g"/>
    <description>
      <text>none</text>
    </description>
  </grouping>
  <grouping name="service-interface-point-g">
    <leaf name="layer-protocol-name">
      <type name="layer-protocol-name"/>
      <config value="false"/>
      <description>
        <text>Usage of layerProtocolName [&gt;1]  in the ServiceInterfacePoint should be considered experimental</text>
      </description>
    </leaf>
    <leaf-list name="supported-layer-protocol-qualifier">
      <type name="layer-protocol-qualifier"/>
      <config value="false"/>
      <min-elements value="1"/>
      <description>
        <text>none</text>
      </description>
    </leaf-list>
    <uses name="resource-spec-g"/>
    <uses name="admin-state-pac-g"/>
    <uses name="capacity-pac-g"/>
    <description>
      <text>The LogicalTerminationPoint (LTP) object class encapsulates the termination and adaptation functions of one or more transport layers.
The structure of LTP supports all transport protocols including circuit and packet forms.</text>
    </description>
  </grouping>
  <grouping name="capacity-pac-g">
    <container name="total-potential-capacity">
      <config value="false"/>
      <uses name="capacity-g"/>
      <description>
        <text>An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.</text>
      </description>
    </container>
    <container name="available-capacity">
      <config value="false"/>
      <uses name="capacity-g"/>
      <description>
        <text>Capacity available to be assigned.</text>
      </description>
    </container>
    <description>
      <text>The TopologicalEntity derives capacity from the underlying realization.
A TopologicalEntity may be an abstraction and virtualization of a subset of the underlying capability offered in a view or may be directly reflecting the underlying realization.
A TopologicalEntity may be directly used in the view or may be assigned to another view for use.
The clients supported by a multi-layer TopologicalEntity may interact such that the resources used by one client may impact those available to another. This is derived from the LTP spec details.
Represents the capacity available to user (client) along with client interaction and usage.
A TopologicalEntity may reflect one or more client protocols and one or more members for each profile.</text>
    </description>
  </grouping>
  <grouping name="termination-pac-g">
    <leaf name="termination-direction">
      <type name="termination-direction"/>
      <config value="false"/>
      <description>
        <text>The overall directionality of the LP.
- A BIDIRECTIONAL LP will have some SINK and/or SOURCE flowss.
- A SINK LP can only contain elements with SINK flows or CONTRA_DIRECTION_SOURCE flows
- A SOURCE LP can only contain SOURCE flows or CONTRA_DIRECTION_SINK flows</text>
      </description>
    </leaf>
    <leaf name="termination-state">
      <type name="termination-state"/>
      <config value="false"/>
      <description>
        <text>Indicates whether the layer is terminated and if so how.</text>
      </description>
    </leaf>
    <description>
      <text>Each transport layer is represented by a LayerProtocol (LP) instance. The LayerProtocol instances it can be used for controlling termination and monitoring functionality.
It can also be used for controlling the adaptation (i.e. encapsulation and/or multiplexing of client signal), tandem connection monitoring, traffic conditioning and/or shaping functionality at an intermediate point along a connection.
Where the client – server relationship is fixed 1:1 and immutable, the layers can be encapsulated in a single LTP instance. Where the is a n:1 relationship between client and server, the layers must be split over two separate instances of LTP. </text>
    </description>
  </grouping>
  <identity name="LAYER_PROTOCOL_QUALIFIER">
    <description>
      <text>none</text>
    </description>
  </identity>
  <typedef name="administrative-state">
    <type name="enumeration">
      <enum name="LOCKED">
        <description>
          <text>Users are administratively prohibited from making use of the resource.</text>
        </description>
      </enum>
      <enum name="UNLOCKED">
        <description>
          <text>Users are allowed to use the resource</text>
        </description>
      </enum>
    </type>
    <description>
      <text>The possible values of the administrativeState.</text>
    </description>
  </typedef>
  <typedef name="date-and-time">
    <type name="string"/>
    <description>
      <text>This primitive type defines the date and time according to the following structure:
yyyyMMddhhmmss.s[Z|{+|-}HHMm] where:
yyyy    0000..9999    year
MM    01..12            month
dd        01..31            day
hh        00..23            hour
mm    00..59            minute
ss        00..59            second
s        .0...9            tenth of second (set to .0 if EMS or NE cannot support this granularity)
Z        Z                indicates UTC (rather than local time)
{+|-}    + or -            delta from UTC
HH        00..23            time zone difference in hours
Mm    00..59            time zone difference in minutes.</text>
    </description>
  </typedef>
  <typedef name="directive-value">
    <type name="enumeration">
      <enum name="MINIMIZE">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="MAXIMIZE">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="ALLOW">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="DISALLOW">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="DONT_CARE">
        <description>
          <text>none</text>
        </description>
      </enum>
    </type>
    <description>
      <text>none</text>
    </description>
  </typedef>
  <typedef name="forwarding-direction">
    <type name="enumeration">
      <enum name="BIDIRECTIONAL">
        <description>
          <text>The Fowarding entity supports both BIDIRECTIONAL flows at all Ports (i.e. all Ports have both an INPUT flow and an OUTPUT flow defined)</text>
        </description>
      </enum>
      <enum name="UNIDIRECTIONAL">
        <description>
          <text>The Forwarding entity has Ports that are either INPUT or OUTPUT. It has no BIDIRECTIONAL Ports.</text>
        </description>
      </enum>
      <enum name="UNDEFINED_OR_UNKNOWN">
        <description>
          <text>Not a normal state. The system is unable to determine the correct value.</text>
        </description>
      </enum>
    </type>
    <description>
      <text>The directionality of a Forwarding entity.</text>
    </description>
  </typedef>
  <typedef name="layer-protocol-name">
    <type name="enumeration">
      <enum name="ODU">
        <description>
          <text>Models the ODU layer as per ITU-T G.872</text>
        </description>
      </enum>
      <enum name="ETH">
        <description>
          <text>Models the ETH layer as per ITU-T G.8010</text>
        </description>
      </enum>
      <enum name="DSR">
        <description>
          <text>Models a Digital Signal of an unspecified rate. This value can be used when the intent is to respresent an generic digital layer signal without making any statement on its format or overhead (processing) capabilities.</text>
        </description>
      </enum>
      <enum name="PHOTONIC_MEDIA">
        <description>
          <text>Models the OCH, OTSi, OTSiA, OTSiG, OMS, OTS and Media channels as per ITU-T G.872 (2017) version 4</text>
        </description>
      </enum>
    </type>
    <description>
      <text>Provides a controlled list of layer protocol names and indicates the naming authority.
Note that it is expected that attributes will be added to this structure to convey the naming authority name, the name of the layer protocol using a human readable string and any particular standard reference.
Layer protocol names include:
-    Layer 1 (L1): OTU, ODU
-    Layer 2 (L2): Carrier Grade Ethernet (ETY, ETH), MPLS-TP (MT)
</text>
    </description>
  </typedef>
  <typedef name="lifecycle-state">
    <type name="enumeration">
      <enum name="PLANNED">
        <description>
          <text>The resource is planned but is not present in the network.</text>
        </description>
      </enum>
      <enum name="POTENTIAL_AVAILABLE">
        <description>
          <text>The supporting resources are present in the network but are shared with other clients; or require further configuration before they can be used; or both.
o    When a potential resource is configured and allocated to a client it is moved to the installed state for that client.
o    If the potential resource has been consumed (e.g. allocated to another client) it is moved to the planned state for all other clients.</text>
        </description>
      </enum>
      <enum name="POTENTIAL_BUSY">
        <description>
          <text>The supporting resources are present in the network but are shared with other clients; or require further configuration before they can be used; or both.
o    When a potential resource is configured and allocated to a client it is moved to the installed state for that client.
o    If the potential resource has been consumed (e.g. allocated to another client) it is moved to the planned state for all other clients.</text>
        </description>
      </enum>
      <enum name="INSTALLED">
        <description>
          <text>The resource is present in the network and is capable of providing the service expected.</text>
        </description>
      </enum>
      <enum name="PENDING_REMOVAL">
        <description>
          <text>The resource has been marked for removal</text>
        </description>
      </enum>
    </type>
    <description>
      <text>The possible values of the lifecycleState.</text>
    </description>
  </typedef>
  <grouping name="name-and-value-g">
    <leaf name="value-name">
      <type name="string"/>
      <description>
        <text>The name of the value. The value need not have a name.</text>
      </description>
    </leaf>
    <leaf name="value">
      <type name="string"/>
      <description>
        <text>The value</text>
      </description>
    </leaf>
    <description>
      <text>A scoped name-value pair</text>
    </description>
  </grouping>
  <typedef name="operational-state">
    <type name="enumeration">
      <enum name="DISABLED">
        <description>
          <text>The resource is unable to meet the SLA of the user of the resource. If no (explicit) SLA is defined the resource is disabled if it is totally inoperable and unable to provide service to the user.</text>
        </description>
      </enum>
      <enum name="ENABLED">
        <description>
          <text>The resource is partially or fully operable and available for use</text>
        </description>
      </enum>
    </type>
    <description>
      <text>The possible values of the operationalState.</text>
    </description>
  </typedef>
  <typedef name="port-direction">
    <type name="enumeration">
      <enum name="BIDIRECTIONAL">
        <description>
          <text>The Port has both an INPUT flow and an OUTPUT flow defined.</text>
        </description>
      </enum>
      <enum name="INPUT">
        <description>
          <text>The Port only has definition for a flow into the Forwarding entity (i.e. an ingress flow).</text>
        </description>
      </enum>
      <enum name="OUTPUT">
        <description>
          <text>The Port only has definition for a flow out of the Forwarding entity (i.e. an egress flow).</text>
        </description>
      </enum>
      <enum name="UNIDENTIFIED_OR_UNKNOWN">
        <description>
          <text>Not a normal state. The system is unable to determine the correct value.</text>
        </description>
      </enum>
    </type>
    <description>
      <text>The orientation of flow at the Port of a Forwarding entity</text>
    </description>
  </typedef>
  <typedef name="port-role">
    <type name="enumeration">
      <enum name="SYMMETRIC">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="ROOT">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="LEAF">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="TRUNK">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="UNKNOWN">
        <description>
          <text>none</text>
        </description>
      </enum>
    </type>
    <description>
      <text>The role of an end in the context of the function of the forwarding entity that it bounds</text>
    </description>
  </typedef>
  <typedef name="termination-direction">
    <type name="enumeration">
      <enum name="BIDIRECTIONAL">
        <description>
          <text>A Termination with both SINK and SOURCE flows.</text>
        </description>
      </enum>
      <enum name="SINK">
        <description>
          <text>The flow is up the layer stack from the server side to the client side.
Considering an example of a Termination function within the termination entity, a SINK flow:
- will arrive at at the base of the termination function (the server side) where it is essentially at an INPUT to the termination component
- then will be decoded and deconstructed
- then relevant parts of the flow will be sent out of the termination function (the client side) where it is essentially at an OUTPUT from the termination component
A SINK termination is one that only supports a SINK flow.
A SINK termiation can be bound to an OUTPUT Port of a Forwarding entity</text>
        </description>
      </enum>
      <enum name="SOURCE">
        <description>
          <text>The flow is down the layer stack from the server side to the client side.
Considering an example of a Termination function within the termination entity, a SOURCE flow:
- will arrive at at the top of the termination function (the client side) where it is essentially at an INPUT to the termination component
- then will be assembled with various overheads etc and will be coded
- then coded form of the assembly of flow will be sent out of the termination function (the server side) where it is essentially at an OUTPUT from the termination component
A SOURCE termination is one that only supports a SOURCE flow.
A SOURCE termiation can be bound to an INPUT Port of a Forwarding entity</text>
        </description>
      </enum>
      <enum name="UNDEFINED_OR_UNKNOWN">
        <description>
          <text>Not a normal state. The system is unable to determine the correct value.</text>
        </description>
      </enum>
    </type>
    <description>
      <text>The directionality of a termination entity</text>
    </description>
  </typedef>
  <typedef name="termination-state">
    <type name="enumeration">
      <enum name="LP_CAN_NEVER_TERMINATE">
        <description>
          <text>A non-flexible case that can never be terminated.</text>
        </description>
      </enum>
      <enum name="LT_NOT_TERMINATED">
        <description>
          <text>A flexible termination that can terminate but is currently not terminated.</text>
        </description>
      </enum>
      <enum name="TERMINATED_SERVER_TO_CLIENT_FLOW">
        <description>
          <text>A flexible termination that is currently terminated for server to client flow only.</text>
        </description>
      </enum>
      <enum name="TERMINATED_CLIENT_TO_SERVER_FLOW">
        <description>
          <text>A flexible termination that is currently terminated for client to server flow only.</text>
        </description>
      </enum>
      <enum name="TERMINATED_BIDIRECTIONAL">
        <description>
          <text>A flexible termination that is currently terminated in both directions of flow.</text>
        </description>
      </enum>
      <enum name="LT_PERMENANTLY_TERMINATED">
        <description>
          <text>A non-flexible termination that is always terminated (in both directions of flow for a bidirectional case and in the one direction of flow for both unidirectional cases).</text>
        </description>
      </enum>
      <enum name="TERMINATION_STATE_UNKNOWN">
        <description>
          <text>There TerminationState cannot be determined.</text>
        </description>
      </enum>
    </type>
    <description>
      <text>Provides support for the range of behaviours and specific states that an LP can take with respect to termination of the signal.
Indicates to what degree the LayerTermination is terminated.</text>
    </description>
  </typedef>
  <typedef name="uuid">
    <type name="string"/>
    <description>
      <text>The univeral ID value where the mechanism for generation is defned by some authority not directly referenced in the structure.
UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters.
Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6</text>
    </description>
  </typedef>
  <grouping name="capacity-g">
    <container name="total-size">
      <uses name="capacity-value-g"/>
      <description>
        <text>Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.</text>
      </description>
    </container>
    <container name="bandwidth-profile">
      <uses name="bandwidth-profile-g"/>
      <description>
        <text>none</text>
      </description>
    </container>
    <description>
      <text>Information on capacity of a particular TopologicalEntity.</text>
    </description>
  </grouping>
  <grouping name="bandwidth-profile-g">
    <leaf name="bw-profile-type">
      <type name="bandwidth-profile-type"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <container name="committed-information-rate">
      <uses name="capacity-value-g"/>
      <description>
        <text>none</text>
      </description>
    </container>
    <container name="committed-burst-size">
      <uses name="capacity-value-g"/>
      <description>
        <text>none</text>
      </description>
    </container>
    <container name="peak-information-rate">
      <uses name="capacity-value-g"/>
      <description>
        <text>none</text>
      </description>
    </container>
    <container name="peak-burst-size">
      <uses name="capacity-value-g"/>
      <description>
        <text>none</text>
      </description>
    </container>
    <leaf name="color-aware">
      <type name="boolean"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <leaf name="coupling-flag">
      <type name="boolean"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <description>
      <text>none</text>
    </description>
  </grouping>
  <grouping name="capacity-value-g">
    <leaf name="value">
      <type name="uint64"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <leaf name="unit">
      <type name="capacity-unit"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <description>
      <text>The Capacity (Bandwidth) values that are applicable for digital layers.</text>
    </description>
  </grouping>
  <typedef name="capacity-unit">
    <type name="enumeration">
      <enum name="TB">
        <description>
          <text>Indicates that the integer CapacityValue is in TeraBytes</text>
        </description>
      </enum>
      <enum name="TBPS">
        <description>
          <text>Indicates that the integer CapacityValue is in Terabit-per-second</text>
        </description>
      </enum>
      <enum name="GB">
        <description>
          <text>Indicates that the integer CapacityValue is in GigaBytes</text>
        </description>
      </enum>
      <enum name="GBPS">
        <description>
          <text>Indicates that the integer CapacityValue is in Gigabit-per-second</text>
        </description>
      </enum>
      <enum name="MB">
        <description>
          <text>Indicates that the integer CapacityValue is in MegaBytes</text>
        </description>
      </enum>
      <enum name="MBPS">
        <description>
          <text>Indicates that the integer CapacityValue is in Megabit-per-second</text>
        </description>
      </enum>
      <enum name="KB">
        <description>
          <text>Indicates that the integer CapacityValue is in KiloBytes</text>
        </description>
      </enum>
      <enum name="KBPS">
        <description>
          <text>Indicates that the integer CapacityValue is in Kilobit-per-second</text>
        </description>
      </enum>
      <enum name="GHz">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="MHz">
        <description>
          <text>none</text>
        </description>
      </enum>
    </type>
    <description>
      <text>none</text>
    </description>
  </typedef>
  <typedef name="bandwidth-profile-type">
    <type name="enumeration">
      <enum name="MEF_10.x">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="RFC_2697">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="RFC_2698">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="RFC_4115">
        <description>
          <text>none</text>
        </description>
      </enum>
    </type>
    <description>
      <text>none</text>
    </description>
  </typedef>
  <grouping name="time-range-g">
    <leaf name="end-time">
      <type name="date-and-time"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <leaf name="start-time">
      <type name="date-and-time"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <description>
      <text>none</text>
    </description>
  </grouping>
  <grouping name="time-period-g">
    <leaf name="value">
      <type name="uint64"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <leaf name="unit">
      <type name="time-unit"/>
      <description>
        <text>none</text>
      </description>
    </leaf>
    <description>
      <text>none</text>
    </description>
  </grouping>
  <typedef name="time-unit">
    <type name="enumeration">
      <enum name="YEARS">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="MONTHS">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="DAYS">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="HOURS">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="MINUTES">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="SECONDS">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="MILLISECONDS">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="MICROSECONDS">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="NANOSECONDS">
        <description>
          <text>none</text>
        </description>
      </enum>
      <enum name="PICOSECONDS">
        <description>
          <text>none</text>
        </description>
      </enum>
    </type>
    <description>
      <text>none</text>
    </description>
  </typedef>
  <grouping name="time-interval-g">
    <list name="period">
      <min-elements value="1"/>
      <max-elements value="5"/>
      <uses name="time-period-g"/>
      <description>
        <text>none</text>
      </description>
    </list>
    <description>
      <text>none</text>
    </description>
  </grouping>
  <typedef name="layer-protocol-qualifier">
    <type name="identityref">
      <base name="LAYER_PROTOCOL_QUALIFIER"/>
    </type>
    <description>
      <text>This enumeration is used to qualify the sub-layers (if applicable) for a specific LayerProtocol.
This extensible enumeration is intentionally empty in the common module and will be augmented with layer-specific values in the respective technology-specific modules.
Examples:
- LayerProtocolName := OPTICAL_DATA_UNIT
LayerProtocolQualifier := 'ODU_FLEX', 'ODU_0', 'ODU_1', 'ODU_2', 'ODU_2E', 'ODU_3', 'ODU_4'', 'ODU_CBR'', 'ODU_GFP'', 'ODU_GFP_HAO', etc
- LayerProtocolName := DIGITAL_SIGNAL_RATE
LayerProtocolQualifier := 'GBE', '10_GBE_WAN', '10_GBE_LAN', '100_GBE', 'FC_100', 'FC_200', 'FC_400', 'FC_800', 'FC_1200', 'FC_1600', 'FC_3200', 'STM_1', 'STM_4', 'STM_16', 'STM_64', 'STM_256', 'OC_3', 'OC_12', 'OC_48', 'OC_192', 'OC_768', 'OTU_1', 'OTU_2', 'OTU_2E', 'OTU_3', 'OTU_4', 'GPON', 'XGPON', 'IB_SDR', 'IB_DDR', 'IB_QDR', 'SBCON_ESCON', 'DVB_ASI', 'SDI', 'SDI_1G5', 'SDI_3G', etc
- LayerProtocolName := PHOTONIC_MEDIA
LayerProtocolQualifier := OCH, OTSi, OTSiA, NMC, NMCA, SMC, SMCA, OMS, OTS
</text>
    </description>
  </typedef>
  <rpc name="get-service-interface-point-details">
    <description>
      <text>none</text>
    </description>
    <input>
      <leaf name="sip-id-or-name">
        <type name="string"/>
        <description>
          <text>none</text>
        </description>
      </leaf>
    </input>
    <output>
      <container name="sip">
        <uses name="service-interface-point-g"/>
        <description>
          <text>none</text>
        </description>
      </container>
    </output>
  </rpc>
  <rpc name="get-service-interface-point-list">
    <description>
      <text>none</text>
    </description>
    <output>
      <list name="sip">
        <uses name="service-interface-point-g"/>
        <description>
          <text>none</text>
        </description>
      </list>
    </output>
  </rpc>
  <rpc name="update-service-interface-point">
    <description>
      <text>none</text>
    </description>
    <input>
      <leaf name="sip-id-or-name">
        <type name="string"/>
        <description>
          <text>none</text>
        </description>
      </leaf>
      <leaf name="state">
        <type name="administrative-state"/>
        <description>
          <text>none</text>
        </description>
      </leaf>
    </input>
  </rpc>
</module>
